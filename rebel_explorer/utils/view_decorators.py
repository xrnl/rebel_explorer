from functools import wraps
from time import time
from flask import request, current_app
from werkzeug.contrib.cache import SimpleCache

c = SimpleCache()


def cache_view(timetout=60*5):
    """caches the response of a given view that has this decorator for the time speciefied in timeout
    if that view is accessed before the timeout is over the result does not need to be generated by the view
    but is obtained from the cache instead
    """

    def decorator(view):
        @wraps(view)
        def f(*args, **kwargs):
            rv = c.get(request.path)
            if rv is not None:
                return rv
            rv = view(*args, **kwargs)  # if no response is cached generate response by calling the view function
            c.set(request.path, rv, timeout=timetout)
            return rv

        return f

    return decorator
